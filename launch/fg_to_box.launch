<launch>

  <arg name="standalone" value="false"/> <!-- debug nodes by setting then standalone -->
  <arg name="MANAGER" value="fg_detection_manager" unless="$(arg standalone)"/>
  <arg name="MANAGER" value="" if="$(arg standalone)"/>
  <arg name="LOAD_STATEMENT" value="load" unless="$(arg standalone)"/>
  <arg name="LOAD_STATEMENT" value="standalone" if="$(arg standalone)"/>

  <arg name="gui" default="true" />
  <arg name="device" default="0" />

  <arg name="rgb_image" default="/robocup/head_rgbd_sensor/rgb/image_raw" />
  <arg name="depth_image" default="/robocup/head_rgbd_sensor/depth/image" />
  <arg name="point_cloud" default="/robocup/head_rgbd_sensor/depth_registered/points" />

  <node name="fg_node"
        pkg="fg_ros" type="fg_node.py"
        output="screen"
        clear_params="true"
        required="true">
    <remap from="~input" to="$(arg rgb_image)" />
    <rosparam subst_value="true">
      model_path: $(find fg_ros)/trained_data/yolo7/2023-03-06-fg-for-dspl.pt
      score_thresh: 0.4
      nms_thresh: 0.45
      device: $(arg device)
      class_names: ['bamboo shoot', 'chocolate', 'coffee', 'coke', 'green tea', 'noodle', 'others']
    </rosparam>
  </node>

  <!-- 2d image draw -->
  <node name="label_image_decomposer_instance"
        pkg="jsk_perception" type="label_image_decomposer.py"
        output="screen" clear_params="true" >
    <remap from="~input" to="/fg_node/output" />
    <remap from="~input/label" to="/fg_node/output/label_ins" />
    <remap from="~output/label_viz" to="~output/viz" />
    <rosparam subst_value="true" >
      approximate_sync: false
      use_label_array: false
      only_label: false
      queue_size: 30
      alpha: 0.5
    </rosparam>
  </node>

  <node name="draw_rects"
        pkg="jsk_perception" type="draw_rects.py"
        output="screen"
        clear_params="true" >
    <remap from="~input" to="label_image_decomposer_instance/output/viz" />
    <remap from="~input/rects" to="fg_node/output/rects" />
    <remap from="~input/class" to="fg_node/output/class" />
    <rosparam subst_value="true">
      font_path: $(find jsk_recognition_utils)/font_data/NotoSansJP-Regular.otf
      use_classification_result: true
      label_size: 16
    </rosparam>
  </node>

  <!-- 3d boundind box -->
  <node name="$(arg MANAGER)" pkg="nodelet" type="nodelet" args="manager"/>

  <!-- cluster_filter: 1 is desirable, but only stable with jsk_recognition/#2739 -->
  <node name="fg_euclidean_clustering"
        pkg="nodelet" type="nodelet"
        args="$(arg LOAD_STATEMENT) jsk_pcl/EuclideanClustering $(arg MANAGER)"
        clear_params="true">
    <remap from="~input" to="$(arg point_cloud)"/>
    <remap from="~input/cluster_indices" to="/fg_node/output/cluster_indices"/>
    <rosparam>
      multi: true
      tolerance: 0.03
      min_size: 10
      downsample_enable: true
      approximate_sync: true
      queue_size: 100
      cluster_filter: 1
      use_cluster_indices_header: true
    </rosparam>
  </node>

  <node name="fg_cluster_point_indices_decomposer"
        pkg="nodelet" type="nodelet"
        args="$(arg LOAD_STATEMENT) jsk_pcl/ClusterPointIndicesDecomposer $(arg MANAGER)"
        clear_params="true">
    <remap from="~input" to="$(arg point_cloud)"/>
    <remap from="~target" to="fg_euclidean_clustering/output"/>
    <remap from="~boxes" to="fg_segmentor/output/boxes"/>
    <remap from="~centroid_pose_array" to="fg_segmentor/output/centroid"/>
    <rosparam>
      align_boxes: true
      align_boxes_with_plane: false
      force_to_flip_z_axis: false
      use_pca: true
      target_frame_id: base_footprint
      approximate_sync: true
      queue_size: 100
      use_cluster_indices_header: true
    </rosparam>
  </node>

  <group if="$(arg gui)" >
    <node name="image_view00"
          pkg="image_view" type="image_view">
      <remap from="image" to="draw_rects/output" />
    </node>
  </group>

</launch>
