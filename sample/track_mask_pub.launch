<launch>

  <arg name="ns" default="track_anything" />
  <arg name="model_type" default="vit_b" />
  <arg name="device" default="cuda:0" />
  
  <arg name="compressed" default="true"/>
  <arg name="camera_info" default="/kinect_head/rgb/camera_info"/>
  <arg name="input_image" default="/kinect_head/rgb/image_rect_color"/>
  <arg name="input_point" default="processed_image/screenpoint" />
  <arg name="repub_image" default="image_rect_color"/>
  <arg name="repub_camera_info" default="camera_info"/>
  <arg name="processed_image" default="processed_image"/>
  <arg name="segmentation_image" default="segmentation_image" />
  <arg name="color_fixed_image" default="color_fixed_image" />
  <arg name="segmentation_mask" default="segmentation_mask" />
  

  <arg name="throttle_hz" default="20"/>
  <arg name="x_offset" default="80"/>
  <arg name="y_offset" default="140"/>
  <arg name="width" default="440"/>
  <arg name="height" default="240"/>

  <group ns="$(arg ns)">
    <node if="$(arg compressed)" name="raw_image_transport" pkg="image_transport" type="republish" args="compressed">
      <remap from="in" to="$(arg input_image)"/>
      <remap from="out" to="$(arg repub_image)"/>
    </node>
    <node unless="$(arg compressed)" name="raw_image_relay" pkg="topic_tools" type="relay" args="$(arg input_image) $(arg repub_image)"/>
    <node name="camera_info_relay" pkg="topic_tools" type="relay" args="$(arg camera_info) $(arg repub_camera_info)"/>
    <node name="camera_image_throttle" pkg="topic_tools" type="throttle" args="messages $(arg repub_image) $(arg throttle_hz)"/>
    <node name="camera_info_throttle" pkg="topic_tools" type="throttle" args="messages $(arg repub_camera_info) $(arg throttle_hz)"/>

    <arg name="manager" value="pr2_data_augmentation_manager"/>
    <node name="$(arg manager)" pkg="nodelet" type="nodelet" args="manager"/>

    <node name="crop_decimate" pkg="nodelet" type="nodelet"
      args="load image_proc/crop_decimate $(arg manager)">
      <remap from="camera/image_raw" to="$(arg repub_image)_throttle"/>
      <remap from="camera/camera_info" to="$(arg camera_info)_throttle"/>
      <remap from="camera_out/image_raw" to="$(arg processed_image)"/>
      <rosparam subst_value="true">
        decimation_x : 1
        decimation_y : 1
        x_offset : $(arg x_offset)
        y_offset : $(arg y_offset)
        width : $(arg width)
        height : $(arg height)
        queue_size : 100
      </rosparam>
    </node>


    <node name="image_view2" pkg="image_view2" type="image_view2" output="screen">
      <remap from="image" to="$(arg processed_image)" />
      <param name="use_window" value="false" />
    </node>
    <node pkg="jsk_rqt_plugins" type="rqt_image_view2" name="prompter"
          output="screen">
      <remap from="event" to="image_view2/event" />
      <remap from="image_marked" to="image_marked" />
    </node>
    <node name="track_anything_button"
          pkg="jsk_rqt_plugins" type="rqt_tabbed_buttons" output="screen" clear_params="true">
      <rosparam command="load" file="$(find track_anything_ros)/resource/remote_tabbed_layout.yaml" />
    </node>

    <node name="tracking_node"
          pkg="track_anything_ros" type="track_pub_mask.py"
          output="screen" >
      <remap from="~input_image" to="$(arg processed_image)" />
      <remap from="~output_image" to="$(arg segmentation_image)" />
      <remap from="~color_fixed_image" to="$(arg color_fixed_image)" />
      <remap from="~input_point" to="$(arg input_point)" />
      <remap from="~segmentation_mask" to="$(arg segmentation_mask)" />
      <rosparam subst_value="true" >
        device: $(arg device)
        model_type: $(arg model_type)
        model_dir: $(find track_anything_ros)/checkpoints/
        tracker_config_file: $(find track_anything_ros)/config/tracker_config.yaml
        inpainter_config_file: $(find track_anything_ros)/config/inpainter_config.yaml
      </rosparam>
    </node>
    
    <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
    <remap from="image" to="$(arg segmentation_image)" />
    </node>

  </group>
</launch>
